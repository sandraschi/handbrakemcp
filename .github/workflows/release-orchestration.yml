name: Release Orchestration

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      action:
        description: 'Release action to perform'
        required: true
        default: 'full_release'
        type: choice
        options:
        - full_release
        - patch_release
        - documentation_update
        - hotfix
      version_bump:
        description: 'Version bump type (for automated releases)'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  PYTHON_VERSION: '3.8'

jobs:
  # Analyze release requirements
  analyze-release:
    name: Analyze Release Requirements
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.analyze.outputs.action }}
      version: ${{ steps.analyze.outputs.version }}
      is_major: ${{ steps.analyze.outputs.is_major }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Analyze release action
      id: analyze
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          ACTION="release_published"
          VERSION="${{ github.event.release.tag_name }}"
        else
          ACTION="${{ github.event.inputs.action }}"
          VERSION="manual"
        fi

        # Determine if this is a major release
        if [[ "$VERSION" =~ ^v[0-9]+\.0\.0 ]]; then
          IS_MAJOR="true"
        else
          IS_MAJOR="false"
        fi

        echo "action=$ACTION" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_major=$IS_MAJOR" >> $GITHUB_OUTPUT

        echo "Release Action: $ACTION"
        echo "Version: $VERSION"
        echo "Is Major Release: $IS_MAJOR"

  # Update all version references
  version-sync:
    name: Synchronize Versions
    runs-on: ubuntu-latest
    needs: analyze-release
    if: needs.analyze-release.outputs.action != 'documentation_update'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in all files
      run: |
        # Get current version from manifest
        CURRENT_VERSION=$(python -c "import json; print(json.load(open('dxt/manifest.json'))['version'])")
        echo "Current version: $CURRENT_VERSION"

        # Update all version references
        find . -name "*.md" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.toml" -o -name "*.py" | \
        xargs grep -l "version\|Version" | \
        xargs sed -i "s/$CURRENT_VERSION/{{ version }}/g" || true

        # Commit version updates
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "chore: update version references to $CURRENT_VERSION" || echo "No changes to commit"

  # Generate release artifacts
  generate-artifacts:
    name: Generate Release Artifacts
    runs-on: ubuntu-latest
    needs: [analyze-release, version-sync]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r dxt/requirements-dxt.txt

    - name: Install HandBrake CLI
      run: |
        sudo apt update
        sudo apt install -y handbrake-cli

    - name: Generate DXT package
      run: |
        python dxt/setup-venv.py
        source ./dxt/venv/bin/activate
        python dxt/test-venv.py
        python dxt/scripts/build.py

    - name: Generate checksums
      run: |
        cd dist
        for file in *.dxt; do
          sha256sum "$file" > "${file}.sha256"
          md5sum "$file" > "${file}.md5"
        done
        ls -la

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          dist/*.dxt
          dist/*.sha256
          dist/*.md5
        retention-days: 30

  # Update documentation
  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: analyze-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install mkdocs mkdocs-material mike

    - name: Build and deploy documentation
      run: |
        # Build docs
        mkdocs build --clean

        # Deploy to GitHub Pages
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

        # Use mike for versioned documentation
        mike deploy --push --update-aliases latest

  # Social media and community notifications
  community-announcement:
    name: Community Announcement
    runs-on: ubuntu-latest
    needs: [analyze-release, generate-artifacts]
    if: needs.analyze-release.outputs.action == 'release_published'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: artifacts

    - name: Generate announcement content
      run: |
        VERSION="${{ needs.analyze-release.outputs.version }}"
        IS_MAJOR="${{ needs.analyze-release.outputs.is_major }}"

        # Get changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          CHANGES=$(git log --pretty=format:"• %s" --reverse | head -10)
        else
          CHANGES=$(git log --pretty=format:"• %s" "$PREVIOUS_TAG..HEAD" | head -10)
        fi

        # Create social media post
        cat > social_announcement.md << EOF
        🚀 **HandBrake MCP Server $VERSION is now available!**

        $([ "$IS_MAJOR" = "true" ] && echo "🎉 **Major Release** with exciting new features!" || echo "✨ **New Release** with improvements and fixes!")

        ## What's New
        $CHANGES

        ## Download
        📦 **DXT Package**: https://github.com/${{ github.repository }}/releases/download/$VERSION/handbrake-mcp-${VERSION#v}.dxt

        ## Quick Install
        \`\`\`bash
        dxt install handbrake-mcp-${VERSION#v}.dxt
        \`\`\`

        ## Links
        📚 [Documentation](https://sandraschi.github.io/handbrake-mcp/)
        🐛 [Issues](https://github.com/${{ github.repository }}/issues)
        💬 [Discussions](https://github.com/${{ github.repository }}/discussions)

        #VideoTranscoding #MCP #HandBrake #Automation #OpenSource

        ---
        *Release automated by GitHub Actions*
        EOF

        echo "Generated announcement:"
        cat social_announcement.md

    - name: Create GitHub Discussion
      run: |
        VERSION="${{ needs.analyze-release.outputs.version }}"

        # Create announcement discussion
        gh discussion create \
          --repo ${{ github.repository }} \
          --category "Announcements" \
          --title "🎉 HandBrake MCP Server $VERSION Released!" \
          --body "$(cat social_announcement.md)" \
          || echo "Discussion creation skipped (may already exist)"

      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Release validation
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: [analyze-release, generate-artifacts]

    steps:
    - name: Download and validate artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: validation

    - name: Validate package integrity
      run: |
        cd validation

        # Check file exists
        if [ ! -f *.dxt ]; then
          echo "❌ No DXT package found"
          exit 1
        fi

        PACKAGE_FILE=$(ls *.dxt | head -1)
        echo "Validating package: $PACKAGE_FILE"

        # Check file size
        SIZE=$(stat -c%s "$PACKAGE_FILE")
        if [ $SIZE -lt 10000000 ]; then
          echo "❌ Package too small (${SIZE} bytes)"
          exit 1
        fi

        # Verify checksums
        if [ -f "${PACKAGE_FILE}.sha256" ]; then
          sha256sum -c "${PACKAGE_FILE}.sha256"
        fi

        if [ -f "${PACKAGE_FILE}.md5" ]; then
          md5sum -c "${PACKAGE_FILE}.md5"
        fi

        echo "✅ Package validation passed"

    - name: Update release with validation status
      if: needs.analyze-release.outputs.action == 'release_published'
      run: |
        VERSION="${{ needs.analyze-release.outputs.version }}"

        gh release edit "$VERSION" \
          --notes "**✅ Release Validation Complete**

        All automated checks have passed:
        - Package integrity verified
        - Checksums validated
        - File size confirmed
        - Documentation deployed
        - Community announcements sent

        This release is ready for production use! 🎉" \
          --tag "$VERSION"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release maintenance
  maintenance:
    name: Post-Release Maintenance
    runs-on: ubuntu-latest
    needs: [analyze-release, validate-release]
    if: needs.analyze-release.outputs.action == 'release_published'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update milestones and labels
      run: |
        VERSION="${{ needs.analyze-release.outputs.version }}"

        # Close milestone if it exists
        gh milestone list | grep "$VERSION" | head -1 | awk '{print $1}' | xargs -I {} gh milestone edit {} --state closed || true

        echo "✅ Release maintenance completed"

      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate release summary
      run: |
        VERSION="${{ needs.analyze-release.outputs.version }}"
        REPO="${{ github.repository }}"

        cat > release_summary.md << EOF
        ## 📋 Release Summary: $VERSION

        ### ✅ Completed Tasks
        - Release published to GitHub
        - DXT package generated and validated
        - Checksums created and verified
        - Documentation deployed to GitHub Pages
        - Community announcements sent
        - Wiki updated with new version
        - Milestones closed

        ### 📊 Release Metrics
        - Repository: $REPO
        - Version: $VERSION
        - Release Date: $(date -u)
        - Package Size: $(ls -lh artifacts/*.dxt | awk '{print $5}')

        ### 🔗 Important Links
        - 📦 [Download Release](https://github.com/$REPO/releases/tag/$VERSION)
        - 📚 [Documentation](https://sandraschi.github.io/handbrake-mcp/)
        - 🐛 [Issue Tracker](https://github.com/$REPO/issues)
        - 💬 [Community Discussions](https://github.com/$REPO/discussions)

        ### 📈 Next Steps
        1. Monitor for any reported issues
        2. Plan next release cycle
        3. Update roadmap based on feedback
        4. Consider feature backports if needed

        ---
        *Generated automatically by release orchestration*
        EOF

        echo "Release summary generated:"
        cat release_summary.md

